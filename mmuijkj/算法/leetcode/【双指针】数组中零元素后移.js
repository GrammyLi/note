function moveZero(arr) {
    const length = arr.length;
    if (length === 0) return arr;
    let j = -1; // 指向第一个0
    for (let i = 0; i < length; i++) {
      if (arr[i] === 0) {
        if (j < 0) {
          j = i;
        }
      } else if (j >= 0) {
        // 当遇到非零元素且已经找到了0时，交换元素位置
        [arr[i], arr[j]] = [arr[j], arr[i]];
        j++;
      }
    }
    return arr;
  }
  
  // 测试
  const arr = [1, 0, 3, 4, 0, 0, 11, 0];
  console.log(moveZero(arr));
  
  // 这段代码使用的是双指针算法，以下是具体分析：
  // 双指针算法介绍
  // 双指针算法通常是利用两个指针（在代码中一般体现为两个变量来代表指针指向的位置），通过对这两个指针按一定规则移动、操作，
  // 来高效地解决特定问题。常见的双指针模式有快慢指针、左右指针等，在本题中属于快慢指针的应用形式。
  
  // 通过这样两个指针（i 和 j）按规则的移动、操作，
  // 最终实现了将数组中的所有 0 元素移动到数组末尾的功能，
  // 所以这段代码确实运用了双指针算法来高效地解决问题。
  // 总之，从双指针的定义、移动以及操作逻辑来看，
  // 上述 moveZero 函数符合双指针算法的特征，巧妙地利用了快慢指针的思想来处理数组元素的位置交换，达到期望的数组元素重排效果。
  