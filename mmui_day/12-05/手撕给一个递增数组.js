// 贪心算法的特点：
// 局部最优：每一步都选择当前最好的选项。
// 无回溯：做出选择后，不会退回去修改之前的决策。
// 适用性：适用于那些通过局部最优解可以最终得到全局最优解的问题。

// 每一步选择都采取在当前状态下最好的选择

// 例子解释：合并区间（递增数组）
// 你提到的递增数组合并问题，其实是一个贪心策略的应用，
// 因为每次都选择当前数字和下一个数字是否是连续的，并尽量合并它们。
// 每次都做出局部最优选择——将当前连续的数字合并成一个区间，直到遇到不连续的数字为止

function mergeRanges(arr) {
  let result = []; // 用于存放合并后的区间
  for (let i = 0; i < arr.length; i++) {
    let start = arr[i]; // 当前区间的起始值
    let end = start; // 当前区间的结束值，初始为起始值

    // 判断是否为连续的递增序列
    while (arr[i + 1] === end + 1) {
      i += 1;
      end = arr[i]; // 如果是连续的，更新结束值，并跳到下一个元素
    }
    let ele = start === end ? `${start}` : `${start}->${end}`;
    console.log(ele);
    // 将连续的数字区间加入结果
    result.push(ele);
  }
  return result; // 返回最终的合并区间
}

const arr = [0, 1, 2, 4, 5, 7, 11, 13, 14];
console.log(mergeRanges(arr));
